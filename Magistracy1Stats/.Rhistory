summarise_all(funs(mean))
library(TeachingDemos)
faces(means[,2:5])
dd=getfacesbykmeans(data[,2:5],3)
means=dd%>%group_by(cluster)%>%
summarise_all(funs(mean))
library(TeachingDemos)
faces(means[,2:5])
dd=getfacesbykmeans(data[,2:5],3)
means=dd%>%group_by(cluster)%>%
summarise_all(funs(mean))
library(TeachingDemos)
faces(means[,2:5])
dd=getfacesbykmeans(data[,2:5],3)
means=dd%>%group_by(cluster)%>%
summarise_all(funs(mean))
library(TeachingDemos)
faces(means[,2:5])
dd=getfacesbykmeans(data[,2:5],3)
means=dd%>%group_by(cluster)%>%
summarise_all(funs(mean))
library(TeachingDemos)
faces(means[,2:5])
#создаем матрицу средних
means=getbykmeans(data[,2:5],4)%>%group_by(cluster)%>%
summarise_all(funs(mean))
library(TeachingDemos)
faces(means[,2:5])#рисуем лица
#функция делает анализ dataset по методу k-means с k кластерами, затем добавляет результаты к датасету
getbykmeans=function(dataset,k){
fit=kmeans(dataset,k)#строится модель
#Добавляем кластер к фрейму данных
library(dplyr)
newdata=as_data_frame(dataset)%>%mutate(cluster=factor(fit$cluster))
}
#создаем матрицу средних
means=getbykmeans(data[,2:5],4)%>%group_by(cluster)%>%
summarise_all(funs(mean))
library(TeachingDemos)
faces(means[,2:5])#рисуем лица
###################################Задание 4
data =data.frame(read_excel("Приложение 2.xlsx"))
data$CLASS=factor(data$CLASS)
pairs(data[,1:7],col=data$CLASS,pch=16)
View(data)
newdata=as_data_frame(data)%>%group_by(CLASS)%>%
summarise_all(funs(mean))
library(TeachingDemos)
faces(newdata[,1:7])#рисуем лица
newdata=as_data_frame(data)%>%group_by(CLASS)%>%
summarise_all(funs(mean))
View(newdata)
library(TeachingDemos)
faces(newdata[,2:8])#рисуем лица
newdata=as_data_frame(data)%>%group_by(CLASS)%>%
summarise_all(funs(mean))
faces(newdata[,2:8])#рисуем лица
###################################Задание 5
data2 =data.frame(read_excel("Приложение 3.xlsx"))
data2= apply(data2,2,as.numeric)
data2=data2[31:80,]
(cluster=predict(rf, data2))
data2=data.frame(cbind(data2,cluster))
data2$cluster=factor(data2$cluster)
data2 =data.frame(read_excel("Приложение 3.xlsx"))
data2= apply(data2,2,as.numeric)
data2=data2[31:80,]
(cluster=predict(rf, data2))
data2=data.frame(cbind(data2,cluster))
data2$cluster=factor(data2$cluster)
###################################Задание 4
data =data.frame(read_excel("Приложение 2.xlsx"))
data$CLASS=factor(data$CLASS)
pairs(data[,1:7],col=data$CLASS,pch=16)
newdata=as_data_frame(data)%>%group_by(CLASS)%>%
summarise_all(funs(mean))
faces(newdata[,2:8])#рисуем лица
library(MASS)
#линейный дискриминантный анализ
ldadat <- lda(CLASS~.,data,method="t")
ldadat$means#групповые средние
(mat=ldadat$scaling)#матрица дискриминантных функций
#matrix(nrow=1,as.numeric(data[65,1:7]))%*%as.matrix(mat)
#plot(ldadat)
#функция для оценки ошибки
misclass <- function(pred, obs) {
tbl <- table(pred, obs)
sum <- colSums(tbl)
dia <- diag(tbl)
msc <- (sum - dia)/sum * 100
m.m <- mean(msc)
cat("Classification table:", "\n")
print(tbl)
cat("Misclassification errors:", "\n")
print(round(msc, 1))
}
misclass(predict(ldadat, data[,1:7])$class, data[,8])
#дерево классификации
library(tree)
datatree <- tree(data[,8] ~ ., data[,-8])
plot(datatree)
text(datatree)
#то же, что и раньше, только методом randomForest
library(randomForest)
rf <- randomForest(data[,8] ~ ., data=data[,1:7])
rfp <- predict(rf, data[,1:7])
table(rfp, data[,8])
MDSplot(randomForest(data[,-8]), data[,8])
misclass(rfp, data[,8])
###################################Задание 5
data2 =data.frame(read_excel("Приложение 3.xlsx"))
data2= apply(data2,2,as.numeric)
data2=data2[31:80,]
(cluster=predict(rf, data2))
data2=data.frame(cbind(data2,cluster))
data2$cluster=factor(data2$cluster)
newdata=as_data_frame(data2)%>%group_by(cluster)%>%
summarise_all(funs(mean))
View(newdata)
newdata=as_data_frame(data2)%>%group_by(cluster)%>%
summarise_all(funs(mean))
faces(newdata[,2:8])#рисуем лица
#Задание 3
library(ggplot2)
yt=c(1133+ p1,	1222,	1354+ p1,	1389,	1342+ p2,	1377,	1491,	1684+ p2)
data=data.frame(time=1:length(yt),values=yt)
plot(data,type="b")
p1 = nchar("Дмитрий")
p2 = nchar("Пасько")
#Задание 3
library(ggplot2)
yt=c(1133+ p1,	1222,	1354+ p1,	1389,	1342+ p2,	1377,	1491,	1684+ p2)
data=data.frame(time=1:length(yt),values=yt)
plot(data,type="b")
fit=lm(values~time,data)
ggplot(data,aes(x=time,y=values))+
geom_point()+
geom_smooth(method=lm)
summary(fit)
cf=fit$coefficients
#прогноз среднего
predict(fit,data.frame(time = c(9)), se.fit=TRUE, interval="confidence", level=0.95)$fit
#прогноз индивидуального
predict(fit,data.frame(time = c(9)), se.fit=TRUE, interval="prediction", level=0.95)$fit
forma=ts(yt, start = 1,frequency = 1)
View(fit)
plot(stl(forma,s.window = "periodic")$time.series,main="")
plot(stl(forma)$time.series,main="")
#прогноз среднего
predict(fit,data.frame(time = c(9)), se.fit=TRUE, interval="confidence", level=0.95)$fit
#прогноз индивидуального
predict(fit,data.frame(time = c(9)), se.fit=TRUE, interval="prediction", level=0.95)$fit
make.names(":smplry:")
make.names("next")
make.names("xXx_TerM1Nat0R_xXx")
make.names("2b.or.not.2b")
make.names(".hidden")
make.names(".hidden",unique = TRUE)
make.names("function",unique = TRUE)
make.names("xXx_TerM1Nat0R_xXx",unique = TRUE)
make.names("super_long_name_in_fact_so_long_i_cannot_stop_typing_please_help",unique = TRUE)
make.names("2b.or.not.2b",unique = TRUE)
make.names("next",unique = TRUE)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
sum(x[x<-0.2 & x>0.3])
sum(x[x>-0.2 & x<0.3])
sum(x>-0.2 & x<0.3)
sum(ifelse(x>-0.2 & x<0.3,1,0))
length(x[x > -0.2 & x < 0.3])
set.seed(1337)
> x <- runif(1e6, min = -1, max = 1)
set.seed(1337)
x <- runif(1e6, min = -1, max = 1)
length(x[x > -0.2 & x < 0.3])
install.packages("randtoolbox")
library(randtoolbox)
sessionInfo()
letters
letters(c(1, 23, 5, 19, 15, 13, 5))
letters[c(1, 23, 5, 19, 15, 13, 5)]
n=4000
x=seq(1770,2050,length.out = n)
y=rchisq(n,14)
#скользящее среднее
spanlist=c(0.1,0.15,0.2,0.5,1.0)
plot(x,y,type="l",col="black")
n=1000
x=seq(1770,2050,length.out = n)
y=rchisq(n,14)
#скользящее среднее
spanlist=c(0.1,0.15,0.2,0.5,1.0)
plot(x,y,type="l",col="black")
n=1000
x=seq(1770,2050,length.out = n)
y=rchisq(n,14)
#скользящее среднее
spanlist=c(0.1,0.15,0.2,0.5,1.0)
plot(x,y,type="l",col="grey")
n=1000
x=seq(1770,2050,length.out = n)
y=rchisq(n,14)
#скользящее среднее
spanlist=c(0.1,0.15,0.2,0.5,1.0)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
n=1000
x=seq(1770,2050,length.out = n)
y=rchisq(n,14)
#скользящее среднее
spanlist=c(0.1,0.15,0.2,0.5,1.0)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n")
n=1000
x=seq(1770,2050,length.out = n)
y=rchisq(n,14)
#скользящее среднее
spanlist=c(0.1,0.15,0.2,0.5,1.0)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
n=1000
x=seq(1770,2050,length.out = n)
y=rchisq(n,14)
#скользящее среднее
spanlist=c(0.05,0.1,0.15,0.2,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
n=1000
x=seq(1770,2050,length.out = n)
y=rchisq(n,14)
#скользящее среднее
spanlist=c(0.03,0.1,0.15,0.2,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(0.03,0.1,0.15,0.2,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", spanlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(5,10,15,20)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", spanlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(5,10,15,20)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(2,5,10,15,20)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#скользящее среднее
spanlist=c(0.03,0.1,0.15,0.2,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(2,5,10,15,20)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(ksmooth(x,y,"box", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#сплайны
sparlist=c(0.2,0.5,0.6,0.9,1.4)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y,"normal", spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y,"normal", cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(0.2,0.5,0.6,0.9,1.4)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
y=read.table("ArrayE.txt")
View(y)
y=read.table("ArrayE.txt")
y=y[[1]]
y=y[seq(1,length(y),by=8)]
#скользящее среднее
spanlist=c(0.03,0.1,0.15,0.2,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
y=read.table("ArrayE.txt")
y=y[[1]]
y=y[seq(1,length(y),by=8)]
x=1:length(y)
#скользящее среднее
spanlist=c(0.03,0.1,0.15,0.2,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
#скользящее среднее
spanlist=c(0.01,0.1,0.15,0.2,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
#скользящее среднее
spanlist=c(0.01,0.05,0.15,0.2)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
#скользящее среднее
spanlist=c(0.01,0.02,0.03)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
#скользящее среднее
spanlist=c(0.01,0.015,0.02)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
ls=loess(y~x,span=spanlist[i])
lines(x,predict(ls),col=i,lwd=2)
}
legend("topleft",c(paste("span =", spanlist)),col=1:length(spanlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(2,5,10,15,20)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(2,5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(0.2,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(0.02,0.05)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(0.0002,0.005)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(0.0002,50)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#ядерное сглаживание
bandlist=c(80,120,160)
plot(x,y,type="l",col="grey")
for(i in 1:length(spanlist)){
lines(ksmooth(x,y,"normal", bandwidth = bandlist[i]),col=i,lwd=2)
}
legend("topleft",c(paste("band =", bandlist)),col=1:length(bandlist),bty="n",lwd=2)
#сплайны
sparlist=c(0.2,0.9,1.4)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(0.2,0.7,1.2)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(1.1,0.7,0.2)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(1.1,0.8,0.3)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(1.1,1.05,0.3)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(0.3,0.4,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(0.42,0.45,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(0.42,0.45,0.5)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
#lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
smooth.spline(x,y, cv=TRUE)
#сплайны
sparlist=c(-0.42,-0.3,-0.13)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
#lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(-0.42,-0.02,-0.13)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
#lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
#сплайны
sparlist=c(-0.13)
plot(x,y,type="l",col="grey")
for(i in 1:length(sparlist)){
lines(smooth.spline(x,y, spar = sparlist[i]),col=i,lwd=2)
}
#lines(smooth.spline(x,y, cv=TRUE),col=i,lwd=2)
legend("topleft",c(paste("spar =", sparlist)),col=1:length(sparlist),bty="n",lwd=2)
